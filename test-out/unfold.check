/*****************************************
  Emitting Generated Code                  
*******************************************/
class unfoldId extends ((Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int): scala.collection.immutable.List[Int] = {
val x1 = List(1,2,3)
var x3: scala.collection.immutable.List[Int] = x1
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x19 = while ({val x5 = x3
val x6 = x5.isEmpty
val x7 = !x6
x7}) {
val x9 = x3
val x13 = x4
val x10 = x9.head
val x14 = List(x10)
val x15 = x13 ::: x14
x4 = x15
val x11 = x9.tail
x3 = x11
()
}
val x20 = x4
x20
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(1, 2, 3)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class map extends ((Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int): scala.collection.immutable.List[Int] = {
val x1 = List(1,2,3)
var x3: scala.collection.immutable.List[Int] = x1
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x21 = while ({val x5 = x3
val x6 = x5.isEmpty
val x7 = !x6
x7}) {
val x9 = x3
val x15 = x4
val x10 = x9.head
val x13 = x10 * 2
val x16 = List(x13)
val x17 = x15 ::: x16
x4 = x17
val x11 = x9.tail
x3 = x11
()
}
val x22 = x4
x22
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(2, 4, 6)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class mapmap extends ((Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int): scala.collection.immutable.List[Int] = {
val x1 = List(1,2,3)
var x3: scala.collection.immutable.List[Int] = x1
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x23 = while ({val x5 = x3
val x6 = x5.isEmpty
val x7 = !x6
x7}) {
val x9 = x3
val x17 = x4
val x10 = x9.head
val x13 = x10 * 2
val x15 = x13 + 1
val x18 = List(x15)
val x19 = x17 ::: x18
x4 = x19
val x11 = x9.tail
x3 = x11
()
}
val x24 = x4
x24
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(3, 5, 7)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class mapmapRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
var x3: Int = x0
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x22 = while ({val x5 = x3
val x6 = x5 > x1
val x7 = !x6
x7}) {
val x9 = x3
val x16 = x4
val x12 = x9 * 2
val x14 = x12 + 1
val x17 = List(x14)
val x18 = x16 ::: x17
x4 = x18
val x10 = x9 + 1
x3 = x10
()
}
val x23 = x4
x23
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(3, 5, 7, 9, 11)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class filterRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
var x3: Int = x0
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x15 = new OptionInt(0,false)
val x27 = while ({val x5 = x3
val x6 = x5 > x1
val x7 = !x6
x7}) {
val x9 = x3
val x18 = x4
val x12 = x9 % 2
val x13 = x12 == 1
val x16 = if (x13) {
val x14 = new OptionInt(x9,true)
x14
} else {
x15
}
val x19 = x16.defined
val x23 = if (x19) {
val x20 = x16.value
val x21 = List(x20)
val x22 = x18 ::: x21
x22
} else {
x18
}
x4 = x23
val x10 = x9 + 1
x3 = x10
()
}
val x28 = x4
x28
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(1, 3, 5)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class filtermapRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
var x3: Int = x0
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x15 = new OptionInt(0,false)
val x33 = while ({val x5 = x3
val x6 = x5 > x1
val x7 = !x6
x7}) {
val x9 = x3
val x24 = x4
val x12 = x9 % 2
val x13 = x12 == 1
val x16 = if (x13) {
val x14 = new OptionInt(x9,true)
x14
} else {
x15
}
val x18 = x16.defined
val x22 = if (x18) {
val x19 = x16.value
val x20 = x19 * 3
val x21 = new OptionInt(x20,true)
x21
} else {
x15
}
val x25 = x22.defined
val x29 = if (x25) {
val x26 = x22.value
val x27 = List(x26)
val x28 = x24 ::: x27
x28
} else {
x24
}
x4 = x29
val x10 = x9 + 1
x3 = x10
()
}
val x34 = x4
x34
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(3, 9, 15)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class filter2Range extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
var x2: Int = 0
var x3: Int = 0
var x5: Int = x0
val x4 = List()
var x6: scala.collection.immutable.List[Int] = x4
val x96 = while ({val x7 = x5
val x8 = x7 > x1
val x43 = if (x8) {
true
} else {
var x9: Boolean = false
var x10: Int = x7
val x11 = x10
var x14: Int = x11
val x12 = x11 + 1
var x15: Int = x12
val x36 = while ({val x16 = x9
val x17 = x14
val x18 = x17 % 2
val x19 = x18 == 1
val x20 = x16 || x19
val x21 = !x20
x21}) {
val x23 = x15
x10 = x23
val x25 = x10
val x26 = x25 > x1
val x34 = if (x26) {
x9 = true
()
} else {
x14 = x25
val x29 = x25 + 1
x15 = x29
()
}
x34
}
val x37 = x14
x2 = x37
val x39 = x15
x3 = x39
val x41 = x9
x41
}
val x44 = !x43
x44}) {
val x46 = x5
val x47 = x46 > x1
val x82 = if (x47) {
true
} else {
var x48: Boolean = false
var x49: Int = x46
val x50 = x49
var x53: Int = x50
val x51 = x50 + 1
var x54: Int = x51
val x75 = while ({val x55 = x48
val x56 = x53
val x57 = x56 % 2
val x58 = x57 == 1
val x59 = x55 || x58
val x60 = !x59
x60}) {
val x62 = x54
x49 = x62
val x64 = x49
val x65 = x64 > x1
val x73 = if (x65) {
x48 = true
()
} else {
x53 = x64
val x68 = x64 + 1
x54 = x68
()
}
x73
}
val x76 = x53
x2 = x76
val x78 = x54
x3 = x78
val x80 = x48
x80
}
val x87 = if (x82) {
null
} else {
val x83 = x2
val x84 = x3
val x85 = new Tuple2IntInt(x83,x84)
x85
}
val x88 = x6
val x89 = x87._1
val x91 = List(x89)
val x92 = x88 ::: x91
x6 = x92
val x90 = x87._2
x5 = x90
()
}
val x97 = x6
x97
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(1, 3, 5)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class filterCPSRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
var x3: Int = x0
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x35 = while ({val x5 = x3
val x6 = x5 > x1
val x7 = !x6
x7}) {
val x9 = x3
val x18 = x4
var x19: Boolean = false
var x20: Int = 0
val x12 = x9 % 2
val x13 = x12 == 1
val x25 = if (x13) {
x19 = true
x20 = x9
()
} else {
()
}
val x26 = x19
val x27 = x20
val x31 = if (x26) {
val x29 = List(x27)
val x30 = x18 ::: x29
x30
} else {
x18
}
x4 = x31
val x10 = x9 + 1
x3 = x10
()
}
val x36 = x4
x36
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(1, 3, 5)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class filterfilterRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
var x3: Int = x0
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x15 = new OptionInt(0,false)
val x23 = new OptionOptionInt(x15,false)
val x38 = while ({val x5 = x3
val x6 = x5 > x1
val x7 = !x6
x7}) {
val x9 = x3
val x26 = x4
val x12 = x9 % 2
val x13 = x12 == 1
val x16 = if (x13) {
val x14 = new OptionInt(x9,true)
x14
} else {
x15
}
val x18 = x16.defined
val x21 = if (x18) {
val x19 = x16.value
val x20 = x19 > 3
x20
} else {
false
}
val x24 = if (x21) {
val x22 = new OptionOptionInt(x16,true)
x22
} else {
x23
}
val x27 = x24.defined
val x34 = if (x27) {
val x28 = x24.value
val x29 = x28.defined
val x33 = if (x29) {
val x30 = x28.value
val x31 = List(x30)
val x32 = x26 ::: x31
x32
} else {
x26
}
x33
} else {
x26
}
x4 = x34
val x10 = x9 + 1
x3 = x10
()
}
val x39 = x4
x39
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(5)
