/*****************************************
  Emitting Generated Code                  
*******************************************/
class streamId extends ((Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int): scala.collection.immutable.List[Int] = {
val x1 = List(1,2,3)
var x3: scala.collection.immutable.List[Int] = x1
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x31 = while ({val x5 = x3
val x6 = x5.isEmpty
val x7 = !x6
x7}) {
var x10: Boolean = false
var x11: Int = 0
val x13 = x3
x10 = true
val x14 = x13.head
x11 = x14
val x16 = x13.tail
x3 = x16
val x21 = x10
val x22 = x11
val x29 = if (x21) {
val x24 = x4
val x25 = List(x22)
val x26 = x24 ::: x25
x4 = x26
()
} else {
()
}
x29
}
val x32 = x4
x32
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(1, 2, 3)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class map extends ((Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int): scala.collection.immutable.List[Int] = {
val x1 = List(1,2,3)
var x3: scala.collection.immutable.List[Int] = x1
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x34 = while ({val x5 = x3
val x6 = x5.isEmpty
val x7 = !x6
x7}) {
var x10: Boolean = false
var x11: Int = 0
val x13 = x3
x10 = true
val x14 = x13.head
val x20 = x14 * 2
x11 = x20
val x16 = x13.tail
x3 = x16
val x24 = x10
val x25 = x11
val x32 = if (x24) {
val x27 = x4
val x28 = List(x25)
val x29 = x27 ::: x28
x4 = x29
()
} else {
()
}
x32
}
val x35 = x4
x35
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(2, 4, 6)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class mapmap extends ((Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int): scala.collection.immutable.List[Int] = {
val x1 = List(1,2,3)
var x3: scala.collection.immutable.List[Int] = x1
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x37 = while ({val x5 = x3
val x6 = x5.isEmpty
val x7 = !x6
x7}) {
var x10: Boolean = false
var x11: Int = 0
val x13 = x3
x10 = true
val x14 = x13.head
val x22 = x14 * 2
val x23 = x22 + 1
x11 = x23
val x16 = x13.tail
x3 = x16
val x27 = x10
val x28 = x11
val x35 = if (x27) {
val x30 = x4
val x31 = List(x28)
val x32 = x30 ::: x31
x4 = x32
()
} else {
()
}
x35
}
val x38 = x4
x38
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(3, 5, 7)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class mapmapRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
var x3: Int = x0
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x36 = while ({val x5 = x3
val x6 = x5 > x1
val x7 = !x6
x7}) {
var x10: Boolean = false
var x11: Int = 0
val x13 = x3
x10 = true
val x21 = x13 * 2
val x22 = x21 + 1
x11 = x22
val x15 = x13 + 1
x3 = x15
val x26 = x10
val x27 = x11
val x34 = if (x26) {
val x29 = x4
val x30 = List(x27)
val x31 = x29 ::: x30
x4 = x31
()
} else {
()
}
x34
}
val x37 = x4
x37
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(3, 5, 7, 9, 11)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class filterRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
var x3: Int = x0
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x38 = while ({val x5 = x3
val x6 = x5 > x1
val x7 = !x6
x7}) {
var x10: Boolean = false
var x11: Int = 0
val x13 = x3
val x19 = x13 % 2
val x20 = x19 == 1
val x26 = if (x20) {
x10 = true
x11 = x13
()
} else {
x10 = false
()
}
val x15 = x13 + 1
x3 = x15
val x28 = x10
val x29 = x11
val x36 = if (x28) {
val x31 = x4
val x32 = List(x29)
val x33 = x31 ::: x32
x4 = x33
()
} else {
()
}
x36
}
val x39 = x4
x39
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(1, 3, 5)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class filtermapRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
var x3: Int = x0
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x41 = while ({val x5 = x3
val x6 = x5 > x1
val x7 = !x6
x7}) {
var x10: Boolean = false
var x11: Int = 0
val x13 = x3
val x21 = x13 % 2
val x22 = x21 == 1
val x29 = if (x22) {
x10 = true
val x23 = x13 * 3
x11 = x23
()
} else {
x10 = false
()
}
val x15 = x13 + 1
x3 = x15
val x31 = x10
val x32 = x11
val x39 = if (x31) {
val x34 = x4
val x35 = List(x32)
val x36 = x34 ::: x35
x4 = x36
()
} else {
()
}
x39
}
val x42 = x4
x42
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(3, 9, 15)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class filterfilterRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
var x3: Int = x0
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x45 = while ({val x5 = x3
val x6 = x5 > x1
val x7 = !x6
x7}) {
var x10: Boolean = false
var x11: Int = 0
val x13 = x3
val x21 = x13 % 2
val x22 = x21 == 1
val x33 = if (x22) {
val x23 = x13 > 3
val x29 = if (x23) {
x10 = true
x11 = x13
()
} else {
x10 = false
()
}
x29
} else {
x10 = false
()
}
val x15 = x13 + 1
x3 = x15
val x35 = x10
val x36 = x11
val x43 = if (x35) {
val x38 = x4
val x39 = List(x36)
val x40 = x38 ::: x39
x4 = x40
()
} else {
()
}
x43
}
val x46 = x4
x46
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(5)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class dotProductRange extends ((Int, Int)=>(Int)) {
def apply(x0:Int, x1:Int): Int = {
var x5: Boolean = false
var x6: Int = 0
var x8: Int = x0
var x9: Int = x1
var x12: Int = 0
val x108 = while ({val x13 = x5
val x14 = x6
val x16 = x8
val x17 = x9
val x20 = x16 > 5
val x21 = !x13
val x22 = x20 && x21
val x23 = x17 > 5
val x24 = x22 || x23
val x25 = !x24
x25}) {
var x27: Boolean = false
var x28: Int = 0
val x30 = x5
val x31 = x6
val x33 = x8
val x34 = x9
var x37: Boolean = false
var x38: Int = 0
var x42: Boolean = false
var x43: Int = 0
var x44: Int = 0
var x47: Int = 0
var x48: Int = 0
x37 = x30
x38 = x31
x47 = x33
x48 = x34
val x72 = if (x30) {
val x54 = x34 + 1
x48 = x54
x42 = true
x43 = x31
x44 = x34
x37 = false
x38 = 0
()
} else {
x37 = true
x38 = x33
val x66 = x33 + 1
x47 = x66
()
}
val x73 = x42
val x74 = x43
val x75 = x44
val x78 = x37
val x79 = x38
val x81 = x47
val x82 = x48
val x94 = if (x73) {
x27 = true
val x88 = x74 * x75
x28 = x88
()
} else {
x27 = false
()
}
x5 = x78
x6 = x79
x8 = x81
x9 = x82
val x99 = x27
val x100 = x28
val x106 = if (x99) {
val x102 = x12
val x103 = x102 + x100
x12 = x103
()
} else {
()
}
x106
}
val x109 = x12
x109
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
55
14
14
/*****************************************
  Emitting Generated Code                  
*******************************************/
class flattenRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
var x5: Int = x0
var x6: Boolean = false
var x7: Int = 0
val x2 = List()
var x10: scala.collection.immutable.List[Int] = x2
val x87 = while ({val x11 = x5
val x12 = x6
val x13 = x7
val x16 = x11 > x1
val x17 = !x12
val x18 = x16 && x17
val x19 = !x18
x19}) {
var x21: Boolean = false
var x22: Int = 0
val x24 = x5
val x25 = x6
val x26 = x7
var x29: Boolean = false
var x30: Int = 0
var x32: Int = 0
var x33: Boolean = false
var x34: Int = 0
x32 = x24
x33 = x25
x34 = x26
val x62 = if (x25) {
val x39 = x26 > 5
val x52 = if (x39) {
x33 = false
x34 = 0
()
} else {
x29 = true
x30 = x26
x33 = true
val x44 = x26 + 1
x34 = x44
()
}
x52
} else {
x33 = true
x34 = x24
val x55 = x24 + 1
x32 = x55
()
}
val x63 = x29
val x64 = x30
val x66 = x32
val x67 = x33
val x68 = x34
x21 = x63
x22 = x64
x5 = x66
x6 = x67
x7 = x68
val x77 = x21
val x78 = x22
val x85 = if (x77) {
val x80 = x10
val x81 = List(x78)
val x82 = x80 ::: x81
x10 = x82
()
} else {
()
}
x85
}
val x88 = x10
x88
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5, 4, 5, 5)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class flatMapRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
var x6: Int = x0
var x7: Boolean = false
var x8: Int = 0
var x9: Int = 0
val x2 = List()
var x13: scala.collection.immutable.List[Int] = x2
val x106 = while ({val x14 = x6
val x15 = x7
val x16 = x8
val x17 = x9
val x21 = x14 > x1
val x22 = !x15
val x23 = x21 && x22
val x24 = !x23
x24}) {
var x27: Boolean = false
var x28: Int = 0
val x30 = x6
val x31 = x7
val x32 = x8
val x33 = x9
var x37: Boolean = false
var x38: Int = 0
var x40: Int = 0
var x41: Boolean = false
var x42: Int = 0
var x43: Int = 0
x40 = x30
x41 = x31
x42 = x32
x43 = x33
val x78 = if (x31) {
val x50 = x33 > x32
val x66 = if (x50) {
x41 = false
x42 = 0
x43 = 0
()
} else {
x37 = true
x38 = x33
x41 = true
x42 = x32
val x56 = x33 + 1
x43 = x56
()
}
x66
} else {
val x69 = x30 + 1
x40 = x69
x41 = true
x42 = x30
x43 = 1
()
}
val x79 = x37
val x80 = x38
val x82 = x40
val x83 = x41
val x84 = x42
val x85 = x43
x27 = x79
x28 = x80
x6 = x82
x7 = x83
x8 = x84
x9 = x85
val x96 = x27
val x97 = x28
val x104 = if (x96) {
val x99 = x13
val x100 = List(x97)
val x101 = x99 ::: x100
x13 = x101
()
} else {
()
}
x104
}
val x107 = x13
x107
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5)
