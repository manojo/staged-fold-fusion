/*****************************************
  Emitting Generated Code                  
*******************************************/
class streamId extends ((Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int): scala.collection.immutable.List[Int] = {
val x1 = List(1,2,3)
var x3: scala.collection.immutable.List[Int] = x1
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x20 = while ({val x5 = x3
val x6 = x5.isEmpty
val x7 = !x6
x7}) {
val x9 = x3
val x14 = x4
val x10 = x9.head
val x15 = List(x10)
val x16 = x14 ::: x15
x4 = x16
val x12 = x9.tail
x3 = x12
()
}
val x21 = x4
x21
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(1, 2, 3)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class map extends ((Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int): scala.collection.immutable.List[Int] = {
val x1 = List(1,2,3)
var x3: scala.collection.immutable.List[Int] = x1
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x23 = while ({val x5 = x3
val x6 = x5.isEmpty
val x7 = !x6
x7}) {
val x9 = x3
val x17 = x4
val x10 = x9.head
val x14 = x10 * 2
val x18 = List(x14)
val x19 = x17 ::: x18
x4 = x19
val x12 = x9.tail
x3 = x12
()
}
val x24 = x4
x24
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(2, 4, 6)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class mapmap extends ((Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int): scala.collection.immutable.List[Int] = {
val x1 = List(1,2,3)
var x3: scala.collection.immutable.List[Int] = x1
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x26 = while ({val x5 = x3
val x6 = x5.isEmpty
val x7 = !x6
x7}) {
val x9 = x3
val x20 = x4
val x10 = x9.head
val x14 = x10 * 2
val x17 = x14 + 1
val x21 = List(x17)
val x22 = x20 ::: x21
x4 = x22
val x12 = x9.tail
x3 = x12
()
}
val x27 = x4
x27
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(3, 5, 7)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class mapmapRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
var x3: Int = x0
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x25 = while ({val x5 = x3
val x6 = x5 > x1
val x7 = !x6
x7}) {
val x9 = x3
val x19 = x4
val x13 = x9 * 2
val x16 = x13 + 1
val x20 = List(x16)
val x21 = x19 ::: x20
x4 = x21
val x11 = x9 + 1
x3 = x11
()
}
val x26 = x4
x26
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(3, 5, 7, 9, 11)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class filterRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
var x3: Int = x0
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x15 = new OptionInt(0,false)
val x28 = while ({val x5 = x3
val x6 = x5 > x1
val x7 = !x6
x7}) {
val x9 = x3
val x13 = x9 % 2
val x14 = x13 == 1
val x16 = if (x14) {
val x10 = new OptionInt(x9,true)
x10
} else {
x15
}
val x18 = x16.defined
val x25 = if (x18) {
val x19 = x4
val x20 = x16.value
val x21 = List(x20)
val x22 = x19 ::: x21
x4 = x22
()
} else {
()
}
val x11 = x9 + 1
x3 = x11
()
}
val x29 = x4
x29
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(1, 3, 5)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class filtermapRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
var x3: Int = x0
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x15 = new OptionInt(0,false)
val x34 = while ({val x5 = x3
val x6 = x5 > x1
val x7 = !x6
x7}) {
val x9 = x3
val x13 = x9 % 2
val x14 = x13 == 1
val x16 = if (x14) {
val x10 = new OptionInt(x9,true)
x10
} else {
x15
}
val x18 = x16.defined
val x22 = if (x18) {
val x19 = x16.value
val x20 = x19 * 3
val x21 = new OptionInt(x20,true)
x21
} else {
x15
}
val x24 = x22.defined
val x31 = if (x24) {
val x25 = x4
val x26 = x22.value
val x27 = List(x26)
val x28 = x25 ::: x27
x4 = x28
()
} else {
()
}
val x11 = x9 + 1
x3 = x11
()
}
val x35 = x4
x35
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(3, 9, 15)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class filterfilterRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
var x3: Int = x0
val x2 = List()
var x4: scala.collection.immutable.List[Int] = x2
val x15 = new OptionInt(0,false)
val x34 = while ({val x5 = x3
val x6 = x5 > x1
val x7 = !x6
x7}) {
val x9 = x3
val x13 = x9 % 2
val x14 = x13 == 1
val x16 = if (x14) {
val x10 = new OptionInt(x9,true)
x10
} else {
x15
}
val x18 = x16.defined
val x19 = x16.value
val x20 = x19 > 3
val x21 = x18 && x20
val x22 = if (x21) {
x16
} else {
x15
}
val x24 = x22.defined
val x31 = if (x24) {
val x25 = x4
val x26 = x22.value
val x27 = List(x26)
val x28 = x25 ::: x27
x4 = x28
()
} else {
()
}
val x11 = x9 + 1
x3 = x11
()
}
val x35 = x4
x35
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(5)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class dotProductRange extends ((Int, Int)=>(Int)) {
def apply(x0:Int, x1:Int): Int = {
val x2 = new Tuple2IntInt(x0,x1)
var x3: Tuple2IntInt = x2
var x4: Int = 0
val x34 = while ({val x5 = x3
val x6 = x5._1
val x8 = x6 > 5
val x7 = x5._2
val x9 = x7 > 5
val x10 = x8 || x9
val x11 = !x10
x11}) {
val x13 = x3
val x29 = x4
val x14 = x13._1
val x15 = x13._2
val x26 = x14 * x15
val x30 = x29 + x26
x4 = x30
val x17 = x14 + 1
val x20 = x15 + 1
val x24 = new Tuple2IntInt(x17,x20)
x3 = x24
()
}
val x35 = x4
x35
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
55
14
14
/*****************************************
  Emitting Generated Code                  
*******************************************/
class repStream extends ((Int)=>(Int)) {
def apply(x0:Int): Int = {
var x1: Int = x0
var x2: Int = 0
val x16 = while ({val x3 = x1
val x4 = x3 > 10
val x5 = !x4
x5}) {
val x7 = x1
val x11 = x2
val x12 = x11 + x7
x2 = x12
val x9 = x7 + 1
x1 = x9
()
}
val x17 = x2
x17
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
55
49
/*****************************************
  Emitting Generated Code                  
*******************************************/
class flattenRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
val x3 = new OptionInt(0,false)
val x4 = new Tuple2IntOptionInt(x0,x3)
var x5: Tuple2IntOptionInt = x4
val x2 = List()
var x6: scala.collection.immutable.List[Int] = x2
val x49 = while ({val x7 = x5
val x8 = x7._1
val x10 = x8 > x1
val x9 = x7._2
val x11 = x9.defined
val x12 = !x11
val x13 = x10 && x12
val x14 = !x13
x14}) {
val x16 = x5
val x18 = x16._2
val x19 = x18.defined
val x36 = if (x19) {
val x20 = x18.value
val x21 = x20 > 5
val x30 = if (x21) {
val x17 = x16._1
val x22 = new Tuple2IntOptionInt(x17,x3)
val x23 = new Tuple2OptionIntTuple2IntOptionInt(x3,x22)
x23
} else {
val x24 = new OptionInt(x20,true)
val x17 = x16._1
val x25 = x20 + 1
val x27 = new OptionInt(x25,true)
val x28 = new Tuple2IntOptionInt(x17,x27)
val x29 = new Tuple2OptionIntTuple2IntOptionInt(x24,x28)
x29
}
x30
} else {
val x17 = x16._1
val x31 = new OptionInt(x17,true)
val x32 = x17 + 1
val x34 = new Tuple2IntOptionInt(x32,x31)
val x35 = new Tuple2OptionIntTuple2IntOptionInt(x3,x34)
x35
}
val x37 = x36._1
val x39 = x37.defined
val x46 = if (x39) {
val x40 = x6
val x41 = x37.value
val x42 = List(x41)
val x43 = x40 ::: x42
x6 = x43
()
} else {
()
}
val x38 = x36._2
x5 = x38
()
}
val x50 = x6
x50
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5, 4, 5, 5)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class flatMapRange extends ((Int, Int)=>(scala.collection.immutable.List[Int])) {
def apply(x0:Int, x1:Int): scala.collection.immutable.List[Int] = {
val x3 = new OptionTuple2IntInt(null,false)
val x4 = new Tuple2IntOptionTuple2IntInt(x0,x3)
var x5: Tuple2IntOptionTuple2IntInt = x4
val x2 = List()
var x6: scala.collection.immutable.List[Int] = x2
val x24 = new OptionInt(0,false)
val x55 = while ({val x7 = x5
val x8 = x7._1
val x10 = x8 > x1
val x9 = x7._2
val x11 = x9.defined
val x12 = !x11
val x13 = x10 && x12
val x14 = !x13
x14}) {
val x16 = x5
val x18 = x16._2
val x19 = x18.defined
val x42 = if (x19) {
val x20 = x18.value
val x21 = x20._1
val x22 = x20._2
val x23 = x22 > x21
val x34 = if (x23) {
val x17 = x16._1
val x25 = new Tuple2IntOptionTuple2IntInt(x17,x3)
val x26 = new Tuple2OptionIntTuple2IntOptionTuple2IntInt(x24,x25)
x26
} else {
val x27 = new OptionInt(x22,true)
val x17 = x16._1
val x28 = x22 + 1
val x30 = new Tuple2IntInt(x21,x28)
val x31 = new OptionTuple2IntInt(x30,true)
val x32 = new Tuple2IntOptionTuple2IntInt(x17,x31)
val x33 = new Tuple2OptionIntTuple2IntOptionTuple2IntInt(x27,x32)
x33
}
x34
} else {
val x17 = x16._1
val x36 = x17 + 1
val x38 = new Tuple2IntInt(x17,1)
val x39 = new OptionTuple2IntInt(x38,true)
val x40 = new Tuple2IntOptionTuple2IntInt(x36,x39)
val x41 = new Tuple2OptionIntTuple2IntOptionTuple2IntInt(x24,x40)
x41
}
val x43 = x42._1
val x45 = x43.defined
val x52 = if (x45) {
val x46 = x6
val x47 = x43.value
val x48 = List(x47)
val x49 = x46 ::: x48
x6 = x49
()
} else {
()
}
val x44 = x42._2
x5 = x44
()
}
val x56 = x6
x56
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
List(1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5)
